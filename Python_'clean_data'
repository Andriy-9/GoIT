{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPQULzFWgNmL6uIKp96s5qS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MfURhHU-vrjI","executionInfo":{"status":"ok","timestamp":1728045362343,"user_tz":-180,"elapsed":22939,"user":{"displayName":"Андрій","userId":"10695848148824314021"}},"outputId":"72744420-76e6-4251-82ce-b4c173a89ce8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#Step 00. Uploading data in the Google Colab environment\n","from google.colab import drive\n","drive.mount('/content/drive')\n","import pandas as pd\n","from datetime import datetime\n","import matplotlib.pyplot as plt\n","df_applications = pd.read_csv('/content/drive/My Drive/applications(2.0).csv')\n","df_industries = pd.read_csv('/content/drive/My Drive/industries(2.0).csv')"]},{"cell_type":"code","source":["#Step 01. Cleaning up duplicate 'applicant_id'\n","cleaned_data_01 = df_applications.drop_duplicates(subset='applicant_id')\n","\n","#Step 02. In the 'External Rating' field, the missing values are changed to zeros\n","cleaned_data_02 = cleaned_data_01.copy()\n","cleaned_data_02['External Rating'] = cleaned_data_02['External Rating'].fillna(0)\n","del cleaned_data_01\n","\n","#Step 03. In the 'Education level' field, fill in the missing values with the text \"Середня\"\n","cleaned_data_03 = cleaned_data_02.copy()\n","cleaned_data_03['Education level'] = cleaned_data_03['Education level'].fillna(\"Середня\")\n","del cleaned_data_02\n","\n","#Step 04. Add to this DataFrame the data from the industries.csv file colum industry ratings.\n","cleaned_data_04 = pd.merge(cleaned_data_03, df_industries, on='Industry', how='left')\n","del cleaned_data_03\n","\n","#Step 05. Convert 'Applied at' to datetime\n","cleaned_data_04.dropna(subset=['Applied at'])\n","cleaned_data_04['Applied at'] = cleaned_data_04['Applied at'].str.split().str[0]\n","cleaned_data_04['Applied at'] = pd.to_datetime(cleaned_data_04['Applied at'], format='%m.%d.%Y')\n","\n","#Step 06. Create a function to calculate the app rating\n","def calculate_rating(row):\n","    # Initialize rating\n","    rating = 0\n","\n","    # Age condition\n","    if 35 <= row['Age'] <= 55:\n","        rating += 20\n","\n","    # Submission day condition (not on weekends)\n","    submission_date = row['Applied at']\n","    if submission_date.weekday() < 5:  # Monday to Friday\n","        rating += 20\n","\n","    # Marital status condition\n","    if row['Marital status'] == 'Married':\n","        rating += 20\n","\n","    # Location condition (Kyiv or Kyiv Region)\n","    if row['Location'] in ['Київ чи область']:\n","        rating += 10\n","\n","    # Adding the Score value directly from the DataFrame\n","    rating += row['Score']\n","\n","    # External Rating conditions\n","    if row['External Rating'] >= 7:\n","        rating += 20\n","    elif row['External Rating'] <= 2:\n","        rating -= 20\n","    return rating\n","\n","#Step 06. Calculation of application rating\n","cleaned_data_05 = cleaned_data_04.copy()\n","cleaned_data_05['Rating'] = cleaned_data_05.apply(calculate_rating, axis=1)\n","del cleaned_data_04\n","\n","#Step 07. Filter to keep only accepted applications\n","#07-1. The rating is 0 if there is no 'Amount' value or if the 'External Rating' is 0\n","cleaned_data_05['Rating'] = cleaned_data_05.apply(\n","    lambda row: 0 if (pd.isnull(row['Amount']) or row['External Rating'] == 0) else row['Rating'],\n","    axis=1)\n","#07-2. The rating is a number from 0 to 100\n","cleaned_data_05 = cleaned_data_05[(cleaned_data_05['Rating'] > 0)&(cleaned_data_05['Rating'] <= 100)]\n","\n","#Step 08. Creating a column of the week\n","cleaned_data_06 = cleaned_data_05.copy()\n","cleaned_data_06['Applied at'] = pd.to_datetime(cleaned_data_06['Applied at'])\n","cleaned_data_06['Week'] = cleaned_data_06['Applied at'].dt.isocalendar().week\n","del cleaned_data_05\n","\n","#Step 09. Grouping data by the week of application\n","cleaned_data_06 = cleaned_data_06[['Week', 'Rating']]\n","cleaned_data_07 = cleaned_data_06.copy()\n","cleaned_data_07['Week'] = cleaned_data_07['Week'].astype(int)\n","cleaned_data_07 = cleaned_data_07.groupby('Week')['Rating'].mean().round(2)\n","del cleaned_data_06\n","\n","#Step 10. Creating chart\n","plt.figure(figsize=(10, 6))\n","ax = cleaned_data_07.plot(kind='bar')\n","plt.title('Average rating of accepted applications by week')\n","plt.xlabel('Week')\n","plt.ylabel('Average rating')\n","for p in ax.patches:\n","    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\n","plt.show()\n"],"metadata":{"id":"onn5L7Xk5NF9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"jgGQh24Vw33O"},"execution_count":null,"outputs":[]}]}