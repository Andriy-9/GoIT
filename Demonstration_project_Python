#Step 00. Uploading data in the Google Colab environment
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
df_applications = pd.read_csv('/content/drive/My Drive/applications(2.0).csv')
df_industries = pd.read_csv('/content/drive/My Drive/industries(2.0).csv')

#Step 01. Cleaning up duplicate 'applicant_id'
cleaned_data_01 = df_applications.drop_duplicates(subset='applicant_id')

#Step 02. In the 'External Rating' field, the missing values are changed to zeros
cleaned_data_02 = cleaned_data_01.copy()
cleaned_data_02['External Rating'] = cleaned_data_02['External Rating'].fillna(0)
del cleaned_data_01

#Step 03. In the 'Education level' field, fill in the missing values with the text "Середня"
cleaned_data_03 = cleaned_data_02.copy()
cleaned_data_03['Education level'] = cleaned_data_03['Education level'].fillna("Середня")
del cleaned_data_02

#Step 04. Add to this DataFrame the data from the industries.csv file colum industry ratings.
cleaned_data_04 = pd.merge(cleaned_data_03, df_industries, on='Industry', how='left')
del cleaned_data_03

#Step 05. Convert 'Applied at' to datetime
cleaned_data_04.dropna(subset=['Applied at'])
cleaned_data_04['Applied at'] = cleaned_data_04['Applied at'].str.split().str[0]
cleaned_data_04['Applied at'] = pd.to_datetime(cleaned_data_04['Applied at'], format='%m.%d.%Y')

#Step 06. Create a function to calculate the app rating
def calculate_rating(row):
    # Initialize rating
    rating = 0

    # Age condition
    if 35 <= row['Age'] <= 55:
        rating += 20

    # Submission day condition (not on weekends)
    submission_date = row['Applied at']
    if submission_date.weekday() < 5:  # Monday to Friday
        rating += 20

    # Marital status condition
    if row['Marital status'] == 'Married':
        rating += 20

    # Location condition (Kyiv or Kyiv Region)
    if row['Location'] in ['Київ чи область']:
        rating += 10

    # Adding the Score value directly from the DataFrame
    rating += row['Score']

    # External Rating conditions
    if row['External Rating'] >= 7:
        rating += 20
    elif row['External Rating'] <= 2:
        rating -= 20
    return rating

#Step 06. Calculation of application rating
cleaned_data_05 = cleaned_data_04.copy()
cleaned_data_05['Rating'] = cleaned_data_05.apply(calculate_rating, axis=1)
del cleaned_data_04

#Step 07. Filter to keep only accepted applications
#07-1. The rating is 0 if there is no 'Amount' value or if the 'External Rating' is 0
cleaned_data_05['Rating'] = cleaned_data_05.apply(
    lambda row: 0 if (pd.isnull(row['Amount']) or row['External Rating'] == 0) else row['Rating'],
    axis=1)
#07-2. The rating is a number from 0 to 100
cleaned_data_05 = cleaned_data_05[(cleaned_data_05['Rating'] > 0)&(cleaned_data_05['Rating'] <= 100)]

#Step 08. Creating a column of the week
cleaned_data_06 = cleaned_data_05.copy()
cleaned_data_06['Applied at'] = pd.to_datetime(cleaned_data_06['Applied at'])
cleaned_data_06['Week'] = cleaned_data_06['Applied at'].dt.isocalendar().week
del cleaned_data_05

#Step 09. Grouping data by the week of application
cleaned_data_06 = cleaned_data_06[['Week', 'Rating']]
cleaned_data_07 = cleaned_data_06.copy()
cleaned_data_07['Week'] = cleaned_data_07['Week'].astype(int)
cleaned_data_07 = cleaned_data_07.groupby('Week')['Rating'].mean().round(2)
del cleaned_data_06

#Step 10. Creating chart
plt.figure(figsize=(10, 6))
ax = cleaned_data_07.plot(kind='bar')
plt.title('Average rating of accepted applications by week')
plt.xlabel('Week')
plt.ylabel('Average rating')
for p in ax.patches:
    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))
plt.show()
